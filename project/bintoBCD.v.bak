module bintoBCD(in, MSB, LSB);
	input[6:0] in;
	output reg[3:0] MSB, LSB;
	
	integer i;
	
	always @(in) begin
		MSB = 4'b0;
		LSB = 4'b0;
		for (i=5 ; i>=0 ; i=i-1) begin
			if (MSB>=5)
				MSB = MSB + 3;
			if (LSB >= 5)
				LSB 		= LSB + 3;
				MSB 		= MSB << 1;
				MSB[0] 	= LSB[3];
				LSB		= LSB << 1;
				LSB[0] 	= in[i];
		end
	end
endmodule 
module countdown(En, enSet, CLK, T, select, Q);
	input En, enSet, CLK; 
	input[6:0] T;
	output reg[1:0] select;
	output reg[6:0] Q;
	
	reg[22:0] counter;
	reg prevCounter;
	reg prevCLK;
	reg prevEnSet;
	
	initial begin
		counter 		= 22'b0;
		prevCounter = counter[22];
		prevCLK 		= CLK;
		select 		= 2'b00;
		prevEnSet	= enSet;
		Q 				= T;
	end

	always @(*) begin
		if (En & ~enSet) begin
			if (prevEnSet == 1'b1 && prevEnSet == 1'b0) select = 2'b0;		// NGT of enSet			
			if (prevCLK == 1'b0 & CLK == 1'b1) begin 								// PGT of CLK
				counter = counter + 1;
				if (prevCounter == 1'b0 & counter[22] == 1'b1) begin			// PGT of Counter[22]
					if (Q == 1'b0) begin
						select = select + 1;
						if (select == 2'b10) select = 2'b11;
						Q = T;
					end
					Q = Q - 1;
				end
			end
		end
		else begin
			counter = 1'd0;
			select = (enSet ? 2'bz : 2'b0);
			Q = T;
		end
		prevCounter = counter[22];
		prevCLK = CLK;
		prevEnSet = enSet;
	end
endmodule
module IC7447(input[3:0] in, input En, output reg[0:6] out);
	always @(*)
	begin
		if (En == 1'b0)    out = 7'b1111111;
		else
		case(in)
			4'b0000: out = 7'b0000001; // "0" 
			4'b0001: out = 7'b1001111; // "1" 
			4'b0010: out = 7'b0010010; // "2" 
			4'b0011: out = 7'b0000110; // "3" 
			4'b0100: out = 7'b1001100; // "4" 
			4'b0101: out = 7'b0100100; // "5" 
			4'b0110: out = 7'b0100000; // "6" 
			4'b0111: out = 7'b0001111; // "7" 
			4'b1000: out = 7'b0000000; // "8"  
			4'b1001: out = 7'b0000100; // "9" 
			default: out = 7'b0000001; // "0"
		endcase
	end 
endmodule 
module setTime(submit, select, Din, En, enSet, selout, Dout);
	input En, enSet, submit;
	input[6:0] Din;
	input[1:0] select;
	output reg[6:0] Dout;
	output reg[1:0] selout;
	
	reg prevSub;
	
	initial begin
		Dout   = 7'bz;
		selout = 2'bz;
		prevSub = submit;
	end
	
	always @(*) begin
		if (En & enSet) begin
			if (prevSub == 1'b0 && submit == 1'b1) begin		// PGT of submit
				Dout = Din;
				selout = select;
			end
		end
		prevSub = submit;
		#5 Dout = 7'bz;
		selout = 2'bz;
	end
endmodule 
module Time(set, select, D, Q);
	input 				set;				// set = 0/1: output/input data.
	input[1:0] 			select;
	input[6:0] 			D;
	output reg[6:0]	Q;
	
	reg[6:0] tR, tY, tG;
	
	initial begin
		tR = 'd35;
		tY = 'd04;
		tG = 'd25;
	end

	always @(*) begin
		case (select)
			2'b00: if (set) tR = D; else Q = tR;
			2'b01: if (set) tY = D; else Q = tY;
			2'b11: if (set) tG = D; else Q = tG;
		endcase
	end
endmodule 
module toLEDR(in, En, LEDR0, LEDR1, LEDR2);
	input[1:0] in;
	input En;
	output reg LEDR0, LEDR1, LEDR2;
	// LEDR2 = RED ... LEDR0 = GREEN
	always @(*) begin
		LEDR2 = En & ~in[1] & ~in[0];
		LEDR1 = En & ~in[1] &  in[0];
		LEDR0 = En &  in[1] &  in[0];
	end
endmodule 
